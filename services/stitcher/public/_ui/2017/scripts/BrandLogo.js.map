{"version":3,"sources":["webpack:///./scripts/components/BrandLogo/BrandLogo.container.js","webpack:///./scripts/components/BrandLogo/index.js","webpack:///./scripts/components/helpers/amplienceUrlBuilder.js"],"names":["BrandLogoContainer","brandName","brandUrl","amplienceUrlBuilder","height","propTypes","PropTypes","string","isRequired","BrandLogo","buildQueryParameters","format","dimensions","density","prefix","params","width","push","join","buildUrls","url","densities","map","webp","pjpg","jpg"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAAGC,SAAH,QAAGA,SAAH;AAAA,MAAcC,QAAd,QAAcA,QAAd;AAAA,SACzB,2DAAC,uDAAD;AAAW,aAAS,EAAEC,4EAAmB,CAACD,QAAD,EAAW;AAAEE,YAAM,EAAE;AAAV,KAAX,CAAzC;AAAqE,WAAO,EAAEH;AAA9E,IADyB;AAAA,CAA3B;;AAIAD,kBAAkB,CAACK,SAAnB,GAA+B;AAC7BJ,WAAS,EAAEK,iDAAS,CAACC,MAAV,CAAiBC,UADC;AAE7BN,UAAQ,EAAEI,iDAAS,CAACC,MAAV,CAAiBC;AAFE,CAA/B;AAKeR,iFAAf,E;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAEeS,2HAAf,E;;;;;;;;;;;;;;;;;;;;;;;ACFA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAASC,UAAT,EAAqBC,OAArB,EAAiC;AAC5D,MAAMC,MAAM,GAAG,GAAf;AACA,MAAMC,MAAM,GAAG,EAAf;AAF4D,MAGpDC,KAHoD,GAGlCJ,UAHkC,CAGpDI,KAHoD;AAAA,MAG7CZ,MAH6C,GAGlCQ,UAHkC,CAG7CR,MAH6C;;AAK5D,MAAIO,MAAJ,EAAY;AACVI,UAAM,CAACE,IAAP,eAAmBN,MAAnB;AACD;;AAED,MAAIK,KAAJ,EAAW;AACTD,UAAM,CAACE,IAAP,aAAiBD,KAAK,GAAGH,OAAzB;AACD;;AAED,MAAIT,MAAJ,EAAY;AACVW,UAAM,CAACE,IAAP,aAAiBb,MAAM,GAAGS,OAA1B;AACD;;AAED,SAAOE,MAAM,GAAGD,MAAM,GAAGC,MAAM,CAACG,IAAP,CAAY,GAAZ,CAAZ,GAA+B,EAA5C;AACD,CAlBD;;AAoBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMT,MAAN;AAAA,MAAcC,UAAd,uEAA2B,EAA3B;AAAA,MAA+BS,SAA/B,uEAA2C,CAAC,CAAD,CAA3C;AAAA,SAAmDA,SAAS,CAACC,GAAV,CAAc,UAAAT,OAAO;AAAA,WAAK;AAC7FO,SAAG,YAAKA,GAAL,SAAWV,oBAAoB,CAACC,MAAD,EAASC,UAAT,EAAqBC,OAArB,CAA/B,CAD0F;AAE7FA,aAAO,YAAKA,OAAL;AAFsF,KAAL;AAAA,GAArB,CAAnD;AAAA,CAAlB;;AAKA,IAAMV,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACiB,GAAD,EAAMR,UAAN,EAAqB;AAC/C,MAAMS,SAAS,GAAGT,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAH,GAAe,CAAC,CAAD,CAA3C;AAEA,SAAO;AACLW,QAAI,EAAEJ,SAAS,CAACC,GAAD,EAAM,MAAN,EAAcR,UAAd,EAA0BS,SAA1B,CADV;AAELG,QAAI,EAAEL,SAAS,CAACC,GAAD,EAAM,MAAN,EAAcR,UAAd,EAA0BS,SAA1B,CAFV;AAGLI,OAAG,EAAEN,SAAS,CAACC,GAAD,EAAM,KAAN,EAAaR,UAAb,EAAyBS,SAAzB;AAHT,GAAP;AAKD,CARD;;AAUelB,kFAAf,E","file":"BrandLogo.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport BrandLogo from '@tuui/brand-logo';\nimport amplienceUrlBuilder from '../helpers/amplienceUrlBuilder';\n\n/*\n  This container is a potentially interim solution to BrandLogo. It uses a passed in brand name\n  and url (which is assumed to be a single density image of 20px height). This information will\n  be obtained from the JSP via data attributes on the mountpoint.\n\n  The intended solution (see BrandLogo.connected) was intended to be driven by obtaining\n  product data from an API, retrieving the image details from Amplience or ProductGateway\n  and then putting the results in the redux store. We may yet revisit this approach once\n  a clear strategy is in place so the associated code has not been deleted (yet).\n */\n\nconst BrandLogoContainer = ({ brandName, brandUrl }) => (\n  <BrandLogo imageUrls={amplienceUrlBuilder(brandUrl, { height: 20 })} altText={brandName} />\n);\n\nBrandLogoContainer.propTypes = {\n  brandName: PropTypes.string.isRequired,\n  brandUrl: PropTypes.string.isRequired\n};\n\nexport default BrandLogoContainer;\n","import BrandLogo from './BrandLogo.container';\n\nexport default BrandLogo;\n","const buildQueryParameters = (format, dimensions, density) => {\n  const prefix = '?';\n  const params = [];\n  const { width, height } = dimensions;\n\n  if (format) {\n    params.push(`fmt=${format}`);\n  }\n\n  if (width) {\n    params.push(`w=${width * density}`);\n  }\n\n  if (height) {\n    params.push(`h=${height * density}`);\n  }\n\n  return params ? prefix + params.join('&') : '';\n};\n\nconst buildUrls = (url, format, dimensions = {}, densities = [1]) => densities.map(density => ({\n  url: `${url}${buildQueryParameters(format, dimensions, density)}`,\n  density: `${density}x`\n}));\n\nconst amplienceUrlBuilder = (url, dimensions) => {\n  const densities = dimensions ? [1, 2, 3] : [1];\n\n  return {\n    webp: buildUrls(url, 'webp', dimensions, densities),\n    pjpg: buildUrls(url, 'pjpg', dimensions, densities),\n    jpg: buildUrls(url, 'jpg', dimensions, densities),\n  };\n};\n\nexport default amplienceUrlBuilder;\n"],"sourceRoot":""}