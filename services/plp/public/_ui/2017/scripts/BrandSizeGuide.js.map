{"version":3,"sources":["webpack:///./scripts/components/BrandSizeGuide/BrandSizeGuide.container.jsx","webpack:///./scripts/components/BrandSizeGuide/index.js","webpack:///./scripts/components/helpers/amplienceUrlBuilder.js"],"names":["BrandSizeGuideContainer","sizeGuideImageUrl","hideBrandSizeGuide","sizeGuideImageWidth","dimensions","width","amplienceUrlBuilder","propTypes","PropTypes","string","isRequired","number","func","defaultProps","buildQueryParameters","format","density","prefix","params","height","push","join","buildUrls","url","densities","map","webp","pjpg","jpg"],"mappings":"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","file":"BrandSizeGuide.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Overlay from '@tuui/overlay';\nimport Image from '@tuui/image';\nimport '@tuui/image/dist/Image.min.css';\n\nimport amplienceUrlBuilder from '../helpers/amplienceUrlBuilder';\n\nconst BrandSizeGuideContainer = ({ sizeGuideImageUrl, hideBrandSizeGuide, sizeGuideImageWidth }) => {\n  const dimensions = { width: sizeGuideImageWidth };\n\n  return (\n    <div\n      id='brand-size-guide-container'\n      className='tu-brand-size-guide-container tu-brand-size-guide-container--hidden'\n    >\n      <Overlay\n        open\n        onClose={hideBrandSizeGuide}\n      >\n        <Image\n          imageUrls={amplienceUrlBuilder(sizeGuideImageUrl, dimensions)}\n          altText='Size guide'\n          dataTest='brand-size-guide-container'\n        />\n      </Overlay>\n    </div>\n  );\n};\n\nBrandSizeGuideContainer.propTypes = {\n  sizeGuideImageUrl: PropTypes.string.isRequired,\n  sizeGuideImageWidth: PropTypes.number,\n  hideBrandSizeGuide: PropTypes.func.isRequired,\n};\n\nBrandSizeGuideContainer.defaultProps = {\n  sizeGuideImageWidth: null\n};\n\nexport default BrandSizeGuideContainer;\n","import BrandSizeGuideContainer from './BrandSizeGuide.container';\n\nexport default BrandSizeGuideContainer;\n","const buildQueryParameters = (format, dimensions, density) => {\n  const prefix = '?';\n  const params = [];\n  const { width, height } = dimensions;\n\n  if (format) {\n    params.push(`fmt=${format}`);\n  }\n\n  if (width) {\n    params.push(`w=${width * density}`);\n  }\n\n  if (height) {\n    params.push(`h=${height * density}`);\n  }\n\n  return params ? prefix + params.join('&') : '';\n};\n\nconst buildUrls = (url, format, dimensions = {}, densities = [1]) => densities.map(density => ({\n  url: `${url}${buildQueryParameters(format, dimensions, density)}`,\n  density: `${density}x`\n}));\n\nconst amplienceUrlBuilder = (url, dimensions) => {\n  const densities = dimensions ? [1, 2, 3] : [1];\n\n  return {\n    webp: buildUrls(url, 'webp', dimensions, densities),\n    pjpg: buildUrls(url, 'pjpg', dimensions, densities),\n    jpg: buildUrls(url, 'jpg', dimensions, densities),\n  };\n};\n\nexport default amplienceUrlBuilder;\n"],"sourceRoot":""}