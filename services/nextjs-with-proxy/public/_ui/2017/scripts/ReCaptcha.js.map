{"version":3,"sources":["webpack:///./scripts/components/reCaptcha/actions/reCaptchaService.js","webpack:///./scripts/components/reCaptcha/config/config.js","webpack:///./scripts/components/reCaptcha/loadreCaptcha.jsx","webpack:///./scripts/components/reCaptcha/presentational/ErrorMessage.jsx"],"names":["reCaptchaService","getData","buttonNode","key","dataset","isKeyAvailable","length","config","apiKey","local","production","captchaCallback","size","render","errorMessage","ReCaptchaApp","props","args","handleChange","value","onSetKey","buttonName","setValue","setState","recaptchaKey","isError","disabled","navigator","userAgent","match","scrollIntoView","isErrorLogin","error","console","submitForm","event","state","preventDefault","formNode","submit","document","getElementById","formName","addEventListener","removeEventListener","r","_reCaptchaRef","React","Component","defaultProps","propTypes","PropTypes","string","func","ErrorMessage","bool","isRequired"],"mappings":"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","file":"ReCaptcha.js","sourcesContent":["const reCaptchaService = {\n  getData(buttonNode, key = 'env') {\n    if (buttonNode && buttonNode.dataset[key]) {\n      return buttonNode.dataset[key];\n    }\n    return '';\n  },\n  isKeyAvailable(key = '') {\n    return (key && key.length > 0);\n  }\n};\n\nexport default reCaptchaService;\n","const config = {\n  apiKey: {\n    local: '6LdcVmYUAAAAAPI_xp5hmVqPs7E-yaSLfsvF0eSk',\n    production: '6Ld74XAUAAAAAF3_NeEWqMr9lhsjSvQ743j3DAfP'\n  },\n  captchaCallback: '/recaptcha/verify',\n  size: 'normal',\n  render: 'explicit',\n  errorMessage: 'Please check the recaptcha'\n};\n\nexport default config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport config from './config/config';\nimport reCaptchaService from './actions/reCaptchaService';\nimport ErrorMessage from './presentational/ErrorMessage';\n\nclass ReCaptchaApp extends React.Component {\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.formNode = document.getElementById(props.formName);\n    this.buttonNode = document.getElementById(props.buttonName);\n    this.state = {\n      apiKey: this.buttonNode ? this.buttonNode.dataset.recaptchaKey : props.apiKey,\n      recaptchaKey: '',\n      isError: false\n    };\n  }\n\n  componentDidMount() {\n    const { formNode } = this;\n    if (formNode) {\n      formNode.addEventListener('submit', this.submitForm);\n    }\n  }\n\n  componentWillUnmount() {\n    const { formNode } = this;\n    if (formNode) {\n      formNode.removeEventListener('submit', this.submitForm);\n    }\n  }\n\n  handleChange = (value) => {\n    const { onSetKey, buttonName } = this.props;\n    const setValue = value === null ? '' : value;\n    this.setState({ recaptchaKey: setValue, isError: false });\n\n    if (setValue !== '') {\n      if (onSetKey) { onSetKey(setValue); }\n      if (this.buttonNode) {\n        this.buttonNode.disabled = false;\n\n        // If on iphone and in register page, scroll to submit button\n        if (navigator.userAgent.match(/iPhone/i)) {\n          if (buttonName === 'submit-register') {\n            this.buttonNode.scrollIntoView(false);\n          }\n        }\n      }\n    }\n  };\n\n  isErrorLogin = (error) => {\n    // eslint-disable-next-line no-console\n    console.error(`recapture login error: ${error}`);\n  };\n\n  submitForm = (event) => {\n    const { recaptchaKey } = this.state;\n    event.preventDefault();\n    if (reCaptchaService.isKeyAvailable(recaptchaKey)) {\n      this.formNode.submit();\n    } else {\n      this.buttonNode.disabled = true;\n      this.setState({ isError: true });\n    }\n  };\n\n  render() {\n    const { apiKey, isError } = this.state;\n    return (\n      <React.Fragment>\n        <ErrorMessage errorMessage={config.errorMessage} isError={isError} />\n        {apiKey\n          && (\n            <ReCAPTCHA\n              ref={(r) => { this._reCaptchaRef = r; }}\n              size={config.size}\n              sitekey={apiKey}\n              onChange={this.handleChange}\n              onErrored={this.isErrorLogin}\n            />\n          )}\n      </React.Fragment>\n    );\n  }\n}\n\nReCaptchaApp.defaultProps = {\n  apiKey: '',\n  formName: '',\n  buttonName: '',\n  onSetKey: null\n};\n\nReCaptchaApp.propTypes = {\n  apiKey: PropTypes.string,\n  formName: PropTypes.string,\n  buttonName: PropTypes.string,\n  onSetKey: PropTypes.func\n};\n\nexport default ReCaptchaApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ isError, errorMessage }) => (\n  <div className={`ln-c-field-info--block ln-c-field-info--recaptcha js-recaptcha-field-info${isError ? ' has-error' : ''}`}>\n    <div className='ln-c-field-info ln-u-1/1 ln-c-field-info--error'>\n      <div className='ln-u-display-inline-block ln-u-soft'>\n        <p className='ln-u-h4 ln-u-flush-bottom'>{errorMessage}</p>\n      </div>\n    </div>\n  </div>\n);\n\nErrorMessage.propTypes = {\n  isError: PropTypes.bool.isRequired,\n  errorMessage: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n"],"sourceRoot":""}