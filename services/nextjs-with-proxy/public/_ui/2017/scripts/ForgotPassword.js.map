{"version":3,"sources":["webpack:///./scripts/components/ForgotPassword/ForgotPasswordContainer.jsx","webpack:///./scripts/components/ForgotPassword/config/config.js","webpack:///./scripts/components/ForgotPassword/presentational/ForgotPasswordForm.jsx","webpack:///./scripts/components/ForgotPassword/presentational/ForgotPasswordWrapper.jsx","webpack:///./scripts/components/ForgotPassword/presentational/SuccessPage.jsx","webpack:///./scripts/components/checkout/presentational/TextInput.jsx","webpack:///./scripts/components/reCaptcha/actions/reCaptchaService.js","webpack:///./scripts/components/reCaptcha/config/config.js","webpack:///./scripts/components/reCaptcha/loadreCaptcha.jsx","webpack:///./scripts/components/reCaptcha/presentational/ErrorMessage.jsx"],"names":["ForgotPasswordContainer","props","handleLinkClick","toggleForgotPassword","setState","prevState","active","state","apiKey","csrf","isRecaptchaEnabled","forgotPasswordLinkNode","document","getElementById","dataset","recaptchaKey","enableRecaptcha","addEventListener","removeEventListener","React","Component","config","url","formContent","header","para1","para2","label","required","customerServices","phone","successContent","para1_1","para1_2","para2_1","para2_2","link","ForgotPasswordForm","setEmail","email","setKey","key","submitForm","onSuccess","post","params","CSRFToken","response","status","console","warn","isValidEmail","isError","errorMessages","regexPatterns","isButtonDisabled","propTypes","PropTypes","string","isRequired","bool","func","ForgotPasswordWrapper","navigateToSuccess","page","navigateToForm","renderPage","onClose","activeStyle","SuccessPage","navigateBack","TextInput","id","name","value","fieldErrorMessage","fieldError","errorClasses","autocomplete","maxlength","toString","e","changeForm","target","number","reCaptchaService","getData","buttonNode","isKeyAvailable","length","local","production","captchaCallback","size","render","errorMessage","ReCaptchaApp","args","handleChange","onSetKey","buttonName","setValue","disabled","navigator","userAgent","match","scrollIntoView","isErrorLogin","error","event","preventDefault","formNode","submit","formName","r","_reCaptchaRef","defaultProps","ErrorMessage"],"mappings":"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","file":"ForgotPassword.js","sourcesContent":["import React from 'react';\nimport Overlay from '../Overlay/Overlay';\nimport ForgotPasswordWrapper from './presentational/ForgotPasswordWrapper';\n\nclass ForgotPasswordContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n      apiKey: '',\n      csrf: '',\n      isRecaptchaEnabled: true\n    };\n  }\n\n  componentDidMount() {\n    const forgotPasswordLinkNode = document.getElementById('forgot-password-link');\n    if (forgotPasswordLinkNode) {\n      const { recaptchaKey, csrf, enableRecaptcha } = forgotPasswordLinkNode.dataset;\n      this.setState({ apiKey: recaptchaKey, csrf, isRecaptchaEnabled: enableRecaptcha === 'true' });\n      forgotPasswordLinkNode.addEventListener('click', this.handleLinkClick, true);\n    }\n  }\n\n  componentWillUnmount() {\n    const forgotPasswordLinkNode = document.getElementById('forgot-password-link');\n    if (forgotPasswordLinkNode) {\n      forgotPasswordLinkNode.removeEventListener('click', this.handleLinkClick, true);\n    }\n  }\n\n  handleLinkClick = () => {\n    this.toggleForgotPassword();\n  }\n\n  toggleForgotPassword = () => {\n    this.setState(prevState => ({\n      active: !prevState.active\n    }));\n  }\n\n  render() {\n    const {\n      active, apiKey, csrf, isRecaptchaEnabled\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <Overlay active={active} onOverlayClick={this.toggleForgotPassword} />\n        <ForgotPasswordWrapper\n          active={active}\n          apiKey={apiKey}\n          csrf={csrf}\n          isRecaptchaEnabled={isRecaptchaEnabled}\n          onClose={this.toggleForgotPassword}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ForgotPasswordContainer;\n","const config = {\n  url: '/login/pw/request',\n  formContent: {\n    header: 'Forgotten Tu password',\n    para1: 'Enter the email address you registered with Tu and we\\'ll send you a link to reset your password.',\n    para2: 'If you have registered for another Sainsbury\\'s website you will need to register again for Tu. ',\n    label: 'Email Address',\n    required: 'Required',\n    customerServices: 'Contact customer service',\n    phone: '0800 028 6658'\n  },\n  successContent: {\n    header: 'Check your email',\n    para1_1: 'We\\'ve sent an email to ',\n    para1_2: ' which may take a few minutes to arrive. Please click the link in your email to reset your password. The link will expire after 30 minutes.',\n    para2_1: 'If you can\\'t find the email then please check your spam folder or ',\n    para2_2: ' with a new link',\n    link: 'click here to resend it'\n  }\n};\n\nexport default config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReCaptchaApp from '../../reCaptcha/loadreCaptcha';\nimport TextInput from '../../checkout/presentational/TextInput';\nimport post from '../../../helpers/axiosPostHelper';\nimport isError from '../../../helpers/isError';\nimport errorMessages from '../../../config/errors';\nimport config from '../config/config';\n\nclass ForgotPasswordForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      key: ''\n    };\n  }\n\n  setEmail = (email) => {\n    this.setState({ email });\n  }\n\n  setKey = (key) => {\n    this.setState({ key });\n  }\n\n  submitForm = async () => {\n    const { csrf, onSuccess } = this.props;\n    const { email, key } = this.state;\n    try {\n      const response = await post(config.url, {}, {\n        params: {\n          email,\n          'g-recaptcha-response': key,\n          CSRFToken: csrf\n        }\n      });\n      if (response.status === 200) {\n        onSuccess(email);\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.warn('Error', err);\n    }\n  }\n\n  render() {\n    const { apiKey, isRecaptchaEnabled } = this.props;\n    const { email, key } = this.state;\n    const isValidEmail = isError(email, errorMessages.regexPatterns.email);\n    const isButtonDisabled = isRecaptchaEnabled ? (key === '' || !(isValidEmail)) : !(isValidEmail);\n\n    return (\n      <React.Fragment>\n        <h2>{config.formContent.header}</h2>\n        <p>{config.formContent.para1}</p>\n        <p>{config.formContent.para2}</p>\n        <TextInput\n          id='forgot-password'\n          mandatory\n          name='forgot-password'\n          label='Enter your email'\n          fieldError={false}\n          fieldErrorMessage=''\n          required\n          autocomplete\n          maxlength={50}\n          errorClasses=''\n          value={email}\n          changeForm={this.setEmail}\n        />\n        {apiKey && isRecaptchaEnabled && <ReCaptchaApp apiKey={apiKey} onSetKey={this.setKey} />}\n        <button\n          onClick={this.submitForm}\n          className='ln-u-push-top ln-c-button ln-c-button--primary'\n          disabled={isButtonDisabled}\n          type='button'\n        >\n          Submit\n        </button>\n        <h3 className='ln-u-h4 ln-u-soft-top ln-u-flush-bottom'>{config.formContent.customerServices}</h3>\n        <p className='ln-u-h2 tu-u-color-black'>{config.formContent.phone}</p>\n      </React.Fragment>\n    );\n  }\n}\n\nForgotPasswordForm.propTypes = {\n  apiKey: PropTypes.string.isRequired,\n  csrf: PropTypes.string.isRequired,\n  isRecaptchaEnabled: PropTypes.bool.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nexport default ForgotPasswordForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../../paymentDetails/presentational/Icon';\nimport ForgotPasswordForm from './ForgotPasswordForm';\nimport SuccessPage from './SuccessPage';\n\nclass ForgotPasswordWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      page: 'form'\n    };\n  }\n\n  navigateToSuccess = (email) => {\n    this.setState({\n      email,\n      page: 'success'\n    });\n  };\n\n  navigateToForm = () => {\n    this.setState({\n      page: 'form'\n    });\n  };\n\n  renderPage = () => {\n    const { apiKey, csrf, isRecaptchaEnabled } = this.props;\n    const { email, page } = this.state;\n    switch (page) {\n      case 'form':\n        return (\n          <ForgotPasswordForm\n            apiKey={apiKey}\n            csrf={csrf}\n            isRecaptchaEnabled={isRecaptchaEnabled}\n            onSuccess={this.navigateToSuccess}\n          />\n        );\n      case 'success':\n        return (<SuccessPage email={email} navigateBack={this.navigateToForm} />);\n      default:\n        return (\n          <ForgotPasswordForm\n            apiKey={apiKey}\n            csrf={csrf}\n            isRecaptchaEnabled={isRecaptchaEnabled}\n            onSuccess={this.navigateToSuccess}\n          />\n        );\n    }\n  }\n\n  render() {\n    const { active, onClose } = this.props;\n    const activeStyle = active ? 'active' : '';\n\n    return (\n      <div className={`tu-c-forgot-password ${activeStyle}`}>\n        <div className='ln-u-soft*1/2 ln-u-display-flex ln-u-justify-content-flex-end'>\n          <button\n            type='button'\n            onClick={onClose}\n            className='ln-c-icon ln-c-icon--large tu-c-forgot-password__close-button'\n          >\n            <Icon classes='ln-c-icon ln-c-icon--large' icon='cross' viewBox='-17 -17 66 66' />\n          </button>\n        </div>\n        <div className='ln-u-soft-sides'>\n          {this.renderPage()}\n        </div>\n      </div>\n    );\n  }\n}\n\nForgotPasswordWrapper.propTypes = {\n  active: PropTypes.bool.isRequired,\n  apiKey: PropTypes.string.isRequired,\n  csrf: PropTypes.string.isRequired,\n  isRecaptchaEnabled: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired\n};\n\nexport default ForgotPasswordWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport config from '../config/config';\n\nconst SuccessPage = ({ email, navigateBack }) => (\n  <React.Fragment>\n    <h2>{config.successContent.header}</h2>\n    <p>\n      {config.successContent.para1_1}\n      <strong>{email}</strong>\n      {config.successContent.para1_2}\n    </p>\n    <p>\n      {config.successContent.para2_1}\n      <span onClick={navigateBack} className='ln-c-standalone-link'>{config.successContent.link}</span>\n      {config.successContent.para2_2}\n    </p>\n    <h3 className='ln-u-h4 ln-u-flush-bottom'>{config.formContent.customerServices}</h3>\n    <p className='ln-u-h2 tu-u-color-black'>{config.formContent.phone}</p>\n  </React.Fragment>\n);\n\nSuccessPage.propTypes = {\n  email: PropTypes.string.isRequired,\n  navigateBack: PropTypes.func.isRequired\n};\n\nexport default SuccessPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorDisplay from '../../ErrorDisplay/ErrorDisplay.component';\n\nconst TextInput = (props) => {\n  const {\n    id, label, name, required, value, fieldErrorMessage, fieldError, errorClasses, autocomplete, maxlength\n  } = props;\n  return (\n    <div className={`ln-c-form-group ln-u-push-bottom ${fieldError ? 'has-error' : ''}`}>\n      <label className='ln-c-label' htmlFor={id}>\n        {label}\n        <span className={required ? 'ln-c-label__info' : 'ln-c-label__info ln-u-visually-hidden'} aria-hidden='true'>*</span>\n      </label>\n      <span className='ln-c-input-container tu-t-checkout-input-wrapper'>\n        <input\n          type='text'\n          className='ln-c-text-input'\n          autoComplete={autocomplete.toString()}\n          maxLength={maxlength}\n          id={id}\n          name={name}\n          required={required}\n          value={value}\n          onChange={(e) => {\n            props.changeForm(e.target.value);\n          }}\n        />\n        { fieldError\n        && (\n          <ErrorDisplay\n            classes={`ln-u-push-top*1/2 ${errorClasses}`}\n            error={fieldErrorMessage}\n          />\n        )\n        }\n      </span>\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  required: PropTypes.bool.isRequired,\n  autocomplete: PropTypes.bool.isRequired,\n  maxlength: PropTypes.number.isRequired,\n  value: PropTypes.string.isRequired,\n  fieldError: PropTypes.bool.isRequired,\n  fieldErrorMessage: PropTypes.string.isRequired,\n  errorClasses: PropTypes.string.isRequired,\n  changeForm: PropTypes.func.isRequired\n};\n\nexport default TextInput;\n","const reCaptchaService = {\n  getData(buttonNode, key = 'env') {\n    if (buttonNode && buttonNode.dataset[key]) {\n      return buttonNode.dataset[key];\n    }\n    return '';\n  },\n  isKeyAvailable(key = '') {\n    return (key && key.length > 0);\n  }\n};\n\nexport default reCaptchaService;\n","const config = {\n  apiKey: {\n    local: '6LdcVmYUAAAAAPI_xp5hmVqPs7E-yaSLfsvF0eSk',\n    production: '6Ld74XAUAAAAAF3_NeEWqMr9lhsjSvQ743j3DAfP'\n  },\n  captchaCallback: '/recaptcha/verify',\n  size: 'normal',\n  render: 'explicit',\n  errorMessage: 'Please check the recaptcha'\n};\n\nexport default config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport config from './config/config';\nimport reCaptchaService from './actions/reCaptchaService';\nimport ErrorMessage from './presentational/ErrorMessage';\n\nclass ReCaptchaApp extends React.Component {\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.formNode = document.getElementById(props.formName);\n    this.buttonNode = document.getElementById(props.buttonName);\n    this.state = {\n      apiKey: this.buttonNode ? this.buttonNode.dataset.recaptchaKey : props.apiKey,\n      recaptchaKey: '',\n      isError: false\n    };\n  }\n\n  componentDidMount() {\n    const { formNode } = this;\n    if (formNode) {\n      formNode.addEventListener('submit', this.submitForm);\n    }\n  }\n\n  componentWillUnmount() {\n    const { formNode } = this;\n    if (formNode) {\n      formNode.removeEventListener('submit', this.submitForm);\n    }\n  }\n\n  handleChange = (value) => {\n    const { onSetKey, buttonName } = this.props;\n    const setValue = value === null ? '' : value;\n    this.setState({ recaptchaKey: setValue, isError: false });\n\n    if (setValue !== '') {\n      if (onSetKey) { onSetKey(setValue); }\n      if (this.buttonNode) {\n        this.buttonNode.disabled = false;\n\n        // If on iphone and in register page, scroll to submit button\n        if (navigator.userAgent.match(/iPhone/i)) {\n          if (buttonName === 'submit-register') {\n            this.buttonNode.scrollIntoView(false);\n          }\n        }\n      }\n    }\n  };\n\n  isErrorLogin = (error) => {\n    // eslint-disable-next-line no-console\n    console.error(`recapture login error: ${error}`);\n  };\n\n  submitForm = (event) => {\n    const { recaptchaKey } = this.state;\n    event.preventDefault();\n    if (reCaptchaService.isKeyAvailable(recaptchaKey)) {\n      this.formNode.submit();\n    } else {\n      this.buttonNode.disabled = true;\n      this.setState({ isError: true });\n    }\n  };\n\n  render() {\n    const { apiKey, isError } = this.state;\n    return (\n      <React.Fragment>\n        <ErrorMessage errorMessage={config.errorMessage} isError={isError} />\n        {apiKey\n          && (\n            <ReCAPTCHA\n              ref={(r) => { this._reCaptchaRef = r; }}\n              size={config.size}\n              sitekey={apiKey}\n              onChange={this.handleChange}\n              onErrored={this.isErrorLogin}\n            />\n          )}\n      </React.Fragment>\n    );\n  }\n}\n\nReCaptchaApp.defaultProps = {\n  apiKey: '',\n  formName: '',\n  buttonName: '',\n  onSetKey: null\n};\n\nReCaptchaApp.propTypes = {\n  apiKey: PropTypes.string,\n  formName: PropTypes.string,\n  buttonName: PropTypes.string,\n  onSetKey: PropTypes.func\n};\n\nexport default ReCaptchaApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ isError, errorMessage }) => (\n  <div className={`ln-c-field-info--block ln-c-field-info--recaptcha js-recaptcha-field-info${isError ? ' has-error' : ''}`}>\n    <div className='ln-c-field-info ln-u-1/1 ln-c-field-info--error'>\n      <div className='ln-u-display-inline-block ln-u-soft'>\n        <p className='ln-u-h4 ln-u-flush-bottom'>{errorMessage}</p>\n      </div>\n    </div>\n  </div>\n);\n\nErrorMessage.propTypes = {\n  isError: PropTypes.bool.isRequired,\n  errorMessage: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n"],"sourceRoot":""}